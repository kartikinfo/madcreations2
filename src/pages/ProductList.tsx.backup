import React, { useState, useMemo, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Filter, Grid, List } from 'lucide-react';
import { productsService, searchService, imageService } from '../services/firebaseService';
import { Product } from '../types';
import ProductCard from '../components/ProductCard';

const ProductList: React.FC = () => {
  const location = useLocation();
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState('featured');
  const [priceRange, setPriceRange] = useState([0, 2000]);
  const [selectedSizes, setSelectedSizes] = useState<string[]>([]);
  const [selectedThemes, setSelectedThemes] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [showFilters, setShowFilters] = useState(false);

  // Extract category from URL path
  const getCategoryFromPath = () => {
    const path = location.pathname;
    if (path === '/posters') return 'poster';
    if (path === '/polaroids') return 'polaroid';
    if (path === '/bundles') return 'bundle';
    if (path === '/customizable') return 'customizable';
    return null;
  };

  const category = getCategoryFromPath();
  const searchParams = new URLSearchParams(location.search);
  const searchQuery = searchParams.get('q');

  useEffect(() => {
    const testImageLoading = async () => {
      try {
        console.log('🔍 Testing image loading...');

        // Test if we can fetch products
        const products = await productsService.getAllProducts();
        console.log('📦 Found products:', products.length);

        if (products.length > 0) {
          const testProduct = products[0];
          console.log('🧪 Testing with product:', testProduct.id);

          // Test if we can fetch images for this product
          const images = await imageService.getProductImages(testProduct.id);
          console.log('🖼️ Found images:', images.length);

          if (images.length > 0) {
            console.log('✅ Images found! First image size:', (images[0].imageData.length / 1024 / 1024).toFixed(2), 'MB');
            console.log('🔍 First image starts with:', images[0].imageData.substring(0, 50));
          } else {
            console.log('⚠️ No images found for product:', testProduct.id);
          }
        }
      } catch (error) {
        console.error('❌ Error testing image loading:', error);
      }
    };

    testImageLoading();
  }, []);

  useEffect(() => {
    const loadProducts = async () => {
      try {
        setLoading(true);
        console.log('Loading products...');
        console.log('Category:', category);
        console.log('Search query:', searchQuery);

        let fetchedProducts: Product[] = [];

        if (searchQuery) {
          // Use search service for search queries
          console.log('Searching for:', searchQuery);
          fetchedProducts = await searchService.searchProducts(searchQuery);
        } else if (category) {
          // Filter by category
          console.log('Loading category:', category);
          fetchedProducts = await productsService.getProductsByCategory(category);
        } else {
          // Get all products
          console.log('Loading all products');
          fetchedProducts = await productsService.getAllProducts();
        }

        // Load images from tree structure for each product
        const productsWithImages = await Promise.all(
          fetchedProducts.map(async (product) => {
            try {
              const productImages = await imageService.getProductImages(product.id);
              const imageUrls = productImages.map(img => img.imageData);

              console.log(`Product ${product.id}: Found ${productImages.length} images from tree`);

              // Enhanced image validation with detailed logging
              const validImages = imageUrls.filter((url, index) => {
                if (!url) {
                  console.warn(`Product ${product.id}: Image ${index} is null/undefined`);
                  return false;
                }
                
                if (typeof url !== 'string') {
                  console.warn(`Product ${product.id}: Image ${index} is not a string:`, typeof url);
                  return false;
                }
                
                if (!url.startsWith('data:image/')) {
                  console.warn(`Product ${product.id}: Image ${index} doesn't start with data:image/:`, url.substring(0, 50));
                  return false;
                }
                
                if (url.length < 100) {
                  console.warn(`Product ${product.id}: Image ${index} is too short (${url.length} chars)`);
                  return false;
                }
                
                // Check if it's a valid base64 image
                try {
                  const base64Data = url.split(',')[1];
                  if (!base64Data || base64Data.length < 50) {
                    console.warn(`Product ${product.id}: Image ${index} has invalid base64 data`);
                    return false;
                  }
                  
                  console.log(`Product ${product.id}: Image ${index} is valid (${(url.length / 1024 / 1024).toFixed(2)}MB)`);
                  return true;
                } catch (error) {
                  console.warn(`Product ${product.id}: Image ${index} base64 validation failed:`, error);
                  return false;
                }
              });

              console.log(`Product ${product.id}: Valid images: ${validImages.length}/${imageUrls.length}`);

              return {
                ...product,
                images: validImages.length > 0 ? validImages : ['https://images.pexels.com/photos/1020315/pexels-photo-1020315.jpeg?auto=compress&cs=tinysrgb&w=400']
              };
            } catch (error) {
              console.error(`Error loading images for product ${product.id}:`, error);
              return {
                ...product,
                images: ['https://images.pexels.com/photos/1020315/pexels-photo-1020315.jpeg?auto=compress&cs=tinysrgb&w=400']
              };
            }
          })
        );

        console.log('Fetched products with images:', productsWithImages.length);
        console.log('Products data:', productsWithImages);
        setProducts(productsWithImages);
      } catch (error) {
        console.error('Error loading products:', error);
        setProducts([]);
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [category, searchQuery]);

  // Filter and sort products
  const filteredProducts = useMemo(() => {
    let filtered = products;

    // Filter by category (if not already filtered by URL)
    if (category && !searchQuery) {
      filtered = filtered.filter(product => product.category === category);
    }

    // Filter by price range
    filtered = filtered.filter(product =>
      product.price >= priceRange[0] && product.price <= priceRange[1]
    );

    // Filter by sizes
    if (selectedSizes.length > 0) {
      filtered = filtered.filter(product =>
        product.size && selectedSizes.includes(product.size)
      );
    }

    // Filter by themes
    if (selectedThemes.length > 0) {
      filtered = filtered.filter(product =>
        product.theme && selectedThemes.includes(product.theme)
      );
    }

    // Sort products
    switch (sortBy) {
      case 'price-low':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-high':
        filtered.sort((a, b) => b.price - a.price);
        break;
      case 'rating':
        filtered.sort((a, b) => b.ratings - a.ratings);
        break;
      case 'featured':
      default:
        filtered.sort((a, b) => {
          if (a.featured && !b.featured) return -1;
          if (!a.featured && b.featured) return 1;
          return b.ratings - a.ratings;
        });
        break;
    }

    return filtered;
  }, [products, sortBy, priceRange, selectedSizes, selectedThemes, category, searchQuery]);

  // Get unique values for filters
  const availableSizes = useMemo(() => {
    const sizes = products
      .map(product => product.size)
      .filter((size): size is string => size !== undefined);
    return [...new Set(sizes)];
  }, [products]);

  const availableThemes = useMemo(() => {
    const themes = products
      .map(product => product.theme)
      .filter((theme): theme is string => theme !== undefined);
    return [...new Set(themes)];
  }, [products]);

  const handleSizeToggle = (size: string) => {
    setSelectedSizes(prev =>
      prev.includes(size)
        ? prev.filter(s => s !== size)
        : [...prev, size]
    );
  };

  const handleThemeToggle = (theme: string) => {
    setSelectedThemes(prev =>
      prev.includes(theme)
        ? prev.filter(t => t !== theme)
        : [...prev, theme]
    );
  };

  const clearFilters = () => {
    setPriceRange([0, 2000]);
    setSelectedSizes([]);
    setSelectedThemes([]);
  };

  const getPageTitle = () => {
    if (searchQuery) return `Search results for "${searchQuery}"`;
    if (category) return category.charAt(0).toUpperCase() + category.slice(1);
    return 'All Products';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Enhanced Header with Search */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div className="flex-1">
              <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-1">
                {getPageTitle()}
              </h1>
              <p className="text-gray-600 text-sm sm:text-base">
                {filteredProducts.length} {filteredProducts.length === 1 ? 'product' : 'products'} found
              </p>
            </div>

            {/* Enhanced Search Bar */}
            <div className="flex items-center space-x-3">
              {/* View Mode Toggle */}
              <div className="hidden sm:flex rounded-lg border border-gray-300 overflow-hidden">
                <button
                  className={`p-2 transition-colors ${viewMode === 'grid' ? 'bg-purple-600 text-white' : 'bg-white text-gray-600 hover:bg-gray-50'}`}
                  onClick={() => setViewMode('grid')}
                >
                  <Grid className="h-4 w-4" />
                </button>
                <button
                  className={`p-2 transition-colors ${viewMode === 'list' ? 'bg-purple-600 text-white' : 'bg-white text-gray-600 hover:bg-gray-50'}`}
                  onClick={() => setViewMode('list')}
                >
                  <List className="h-4 w-4" />
                </button>
              </div>

              {/* Sort Dropdown */}
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white"
              >
                <option value="featured">Featured</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
                <option value="name">Name A-Z</option>
                <option value="rating">Highest Rated</option>
              </select>

              {/* Mobile Filter Toggle */}
              <button
                className="lg:hidden bg-purple-600 text-white p-2 rounded-lg hover:bg-purple-700 transition-colors"
                onClick={() => setShowFilters(!showFilters)}
              >
                <Filter className="h-5 w-5" />
                {selectedSizes.length > 0 || selectedThemes.length > 0 || priceRange[1] < 2000 ? (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {(selectedSizes.length + selectedThemes.length)}
                  </span>
                ) : null}
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex flex-col lg:flex-row gap-6">
          {/* Enhanced Filters Sidebar */}
          <aside className={`lg:w-72 ${showFilters ? 'block' : 'hidden lg:block'} lg:block`}>
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 space-y-6 sticky top-6">
              {/* Price Range */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-gray-900">Price Range</h3>
                  <span className="text-sm text-gray-500">₹{priceRange[0]} - ₹{priceRange[1]}</span>
                </div>
                <div className="space-y-3">
                  <input
                    type="range"
                    min="0"
                    max="2000"
                    value={priceRange[1]}
                    onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                  />
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>₹0</span>
                    <span>₹2000+</span>
                  </div>
                </div>
              </div>

              {/* Active Filters */}
              {(selectedSizes.length > 0 || selectedThemes.length > 0) && (
                <div className="border-t pt-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-medium text-gray-900">Active Filters</h4>
                    <button
                      onClick={clearFilters}
                      className="text-sm text-purple-600 hover:text-purple-700"
                    >
                      Clear all
                    </button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {selectedSizes.map(size => (
                      <span key={size} className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-purple-100 text-purple-800">
                        {size}
                        <button
                          onClick={() => handleSizeToggle(size)}
                          className="ml-1 text-purple-600 hover:text-purple-800"
                        >
                          ×
                        </button>
                      </span>
                    ))}
                    {selectedThemes.map(theme => (
                      <span key={theme} className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800">
                        {theme}
                        <button
                          onClick={() => handleThemeToggle(theme)}
                          className="ml-1 text-blue-600 hover:text-blue-800"
                        >
                          ×
                        </button>
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </aside>

          {/* Main Content */}
          <main className="flex-1">
            {loading ? (
              <div className={`grid gap-6 transition-all duration-300 ${
                viewMode === 'grid' 
                  ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' 
                  : 'grid-cols-1'
                }`}>
                {[...Array(8)].map((_, index) => (
                  <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden animate-pulse">
                    <div className="h-48 bg-gradient-to-br from-gray-200 to-gray-300"></div>
                    <div className="p-4 space-y-3">
                      <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                      <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                      <div className="flex justify-between items-center">
                        <div className="h-5 bg-gray-200 rounded w-20"></div>
                        <div className="h-8 bg-gray-200 rounded w-16"></div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : filteredProducts.length === 0 ? (
              <div className="text-center py-16 px-4">
                <div className="max-w-md mx-auto">
                  <div className="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
                    <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No products found</h3>
                  <p className="text-gray-600 mb-6">Try adjusting your filters or search terms</p>
                  <Link
                    to="/"
                    className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                  >
                    Back to Home
                  </Link>
                </div>
              </div>
            ) : (
              <div className={`grid gap-6 transition-all duration-300 ${
                viewMode === 'grid' 
                  ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' 
                  : 'grid-cols-1 max-w-2xl'
                }`}>
                {filteredProducts.map((product) => (
                  <ProductCard key={product.id} product={product} />
                ))}
              </div>
            )}
          </main>
        </div>
      </div>
    </div>
  );
};

export default ProductList;